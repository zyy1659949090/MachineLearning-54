install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
?h2o.glm
?h2o.gbm
demo(h2o.glm)
demo(h2o.gbm)
h2o.init(ip = "123.45.67.89", port = 54321)
h2o.init()
airlinesURL <- "https://s3.amazonaws.com/h2o-airlines-unpacked/allyears2k.csv"
airlines.hex <- h2o.importFile(path = airlinesURL, destination_frame = "airlines.hex")
summary(airlines.hex)
# View quantiles and histograms
#high_na_columns <- h2o.ignoreColumns(data = airlines.hex)
quantile(x = airlines.hex$ArrDelay, na.rm = TRUE)
h2o.hist(airlines.hex$ArrDelay)
originFlights <- h2o.group_by(
data = airlines.hex,
by = "Origin",
nrow("Origin"),
gb.control <- list(na.methods = "rm"))
originFlights <- h2o.group_by(
data = airlines.hex,
by = "Origin",
nrow("Origin"),
gb.control = list(na.methods = "rm"))
originFlights.R <- as.data.frame(originFlights)
# Find number of flights per month
flightsByMonth <- h2o.group_by(
data = airlines.hex,
by = "Month",
nrow("Month"),
gb.control = list(na.methods = "rm"))
flightsByMonth.R <- as.data.frame(flightsByMonth)
which(colnames(airlines.hex) == "Cancelled")
cancellationsByMonth <- h2o.group_by(
data = airlines.hex,
by = "Month",
sum("Cancelled"),
gb.control = list(na.methods = "rm"))
cancellation_rate <- cancellationsByMonth$sum_Cancelled/flightsByMonth$nrow_Month
rates_table <- h2o.cbind(flightsByMonth$Month, cancellation_rate)
rates_table.R <- as.data.frame(rates_table)
# Construct test and train sets using sampling
airlines.split <- h2o.splitFrame(data = airlines.hex, ratios = 0.85)
airlines.train <- airlines.split[[1]]
airlines.test <- airlines.split[[2]]
h2o.table(airlines.train$Cancelled)
h2o.table(airlines.test$Cancelled)
# Set predictor and response variables
Y <- "IsDepDelayed"
X <- c("Origin", "Dest", "DayofMonth", "Year", "UniqueCarrier",
"DayOfWeek", "Month", "DepTime", "ArrTime", "Distance")
airlines.glm <- h2o.glm(
training_frame = airlines.train,
x = X,
y = Y,
family = "binomial",
alpha = 0.5)
summary(airlines.glm)
# Predict using GLM model
pred <- h2o.predict(object = airlines.glm, newdata = airlines.test)
# Look at summary of predictions: probability of TRUE class (p1)
summary(pred$p1)
str(pred)
summary(pred$predict)
summary(as.character(pred$predict))
summary(as.numeric(pred$predict))
str(as.data.frame(pred))
pred <- as.data.frame(pred))
pred <- as.data.frame(pred)
#summary(pred$p1)
summary(as.numeric(pred$predict))
summary(as.numeric(pred$predict) - 1)
# To import small iris data file from H2O’s package:
irisPath <- system.file("extdata", "iris.csv", package = "h2o")
iris.hex <- h2o.importFile(path = irisPath, destination_frame = "iris.hex")
irisPath <- system.file("extdata", "iris.csv", package= "h2o")
iris.hex <- h2o.uploadFile(path = irisPath, destination_frame = "iris.hex")
irisPath <- system.file("extdata", "iris_wheader.csv", package = "h2o")
iris.hex <- h2o.importFile(path = irisPath)
h2o.anyFactor(iris.hex)
prosPath <- system.file("extdata", "prostate.csv", package = "h2o")
prostate.hex <- h2o.importFile(path = prosPath)
# Converts column 4 (RACE) to an enum
as.factor(prostate.hex[,4])
prostate.hex[, 4] <- as.factor(prostate.hex[, 4])
as.factor(prostate.hex[, 4])
# Summary will return a count of the factors
summary(prostate.hex[, 4])
prosPath <- system.file("extdata", "prostate.csv", package = "h2o")
# Imports data set
prostate.hex <- h2o.importFile(path = prosPath, destination_frame = "prostate.hex")
# Converts current data frame (prostate data set) to an R data frame
prostate.R <- as.data.frame(prostate.hex)
# Displays a summary of data frame where the summary was executed in R
summary(prostate.R)
# Import the iris data into H2O
data(iris)
iris
# Converts R object "iris" into H2O object "iris.hex"
iris.hex <- as.h2o(iris, destination_frame = "iris.hex")
head(iris.hex)
prosPath <- system.file("extdata", "prostate.csv", package = "h2o")
prostate.hex <- h2o.importFile(path = prosPath)
# Assign a new name to prostate dataset in the KV store
h2o.ls()
prostate.hex <- h2o.assign(data = prostate.hex, key = "myNewName")
h2o.ls()
colnames(iris.hex)
names(iris.hex)
min(prostate.hex$AGE)
max(prostate.hex$AGE)
prosPath <- system.file("extdata", "prostate.csv", package = "h2o")
prostate.hex <- h2o.importFile(path = prosPath)
# Returns the percentiles at 0, 10, 20, ..., 100%
prostate.qs <- quantile(prostate.hex$PSA, probs = (1:10)/10)
prostate.qs
PSA.outliers <- prostate.hex[
prostate.hex$PSA <= prostate.qs["10%"]  |
prostate.hex$PSA >= prostate.qs["90%"], ]
# Check that the number of rows return is about 20% of the original data
nrow(prostate.hex)
nrow(PSA.outliers)
nrow(PSA.outliers)/nrow(prostate.hex)
summary(prostate.hex)
head(as.data.frame(h2o.table(prostate.hex[ , "AGE"])))
# Two-way table of ages (rows) and race (cols) of all patients
# Example: For the first row there is one count of a 43 year old that’s labeled as RACE = 0
h2o.table(prostate.hex[ , c("AGE", "RACE")])
prosPath <- system.file("extdata", "prostate.csv", package = "h2o")
prostate.hex <- h2o.importFile(path = prosPath)
# Creates object for uniform distribution on prostate data set
s <- h2o.runif(prostate.hex)
summary (s) ## Summarize the results of h2o.runif
# Create training set with threshold of 0.8
prostate.train <- prostate.hex[s <= 0.8, ]
# Assign name to training set
prostate.train <- h2o.assign(prostate.train, "prostate.train")
# Create test set with threshold to filter values greater than 0.8
prostate.test <- prostate.hex[s > 0.8, ]
# Assign name to test set
prostate.test <- h2o.assign(prostate.test, "prostate.test")
# Combine results of test & training sets, then display result
nrow(prostate.train) + nrow(prostate.test)
nrow(prostate.hex) # Matches the full set
# Splits data in prostate data frame with a ratio of 0.75
prostate.split <- h2o.splitFrame(data = prostate.hex, ratios = 0.75)
# Creates training set from 1st data set in split
prostate.train <- prostate.split[[1]]
# Creates testing set from 2st data set in split
prostate.test <- prostate.split[[2]]
prostate.hex <- h2o.getFrame(id = "prostate.hex")
gbm.model <- h2o.getModel(model_id = "GBM_8e4591a9b413407b983d73fbd9eb44cf")
h2o.ls()
h2o.rm(c("prostate.train","prostate.test"))
h2o.ls()
# Create an R functional expression
simpleFun <- function(x) { 2*x + 5 }
# Evaluate the expression across prostate’s AGE column
calculated <- simpleFun(prostate.hex[ , "AGE"])
h2o.cbind(prostate.hex[,"AGE"], calculated)
h2o.init(nthreads = -1)
data(iris)
iris.hex <- as.h2o(iris,destination_frame = "iris.hex")
iris.gbm <- h2o.gbm(
y = 1,
x = 2:5,
training_frame = iris.hex,
ntrees = 10,
max_depth = 3,
min_rows = 2,
learn_rate = 0.2,
distribution = "gaussian")
iris.gbm@model$scoring_history
iris.gbm2 <- h2o.gbm(
y = 5,
x = 1:4,
training_frame = iris.hex,
ntrees = 15,
max_depth = 5,
min_rows = 2,
learn_rate = 0.01,
distribution= "multinomial")
iris.gbm2@model$training_metrics
prostate.hex <- h2o.importFile(
path = "https://raw.github.com/h2oai/h2o/master/smalldata/logreg/prostate.csv",
destination_frame = "prostate.hex")
prostate.glm <- h2o.glm(
y = "CAPSULE",
x = c("AGE", "RACE", "PSA", "DCAPS"),
training_frame = prostate.hex,
family = "binomial",
nfolds = 10,
alpha = 0.5)
prostate.glm@model$cross_validation_metrics
h2o.kmeans(training_frame = iris.hex, k = 3, x = 1:4)
ausPath <- system.file("extdata", "australia.csv", package = "h2o")
australia.hex <- h2o.importFile(path = ausPath)
australia.pca <- h2o.prcomp(
training_frame = australia.hex,
transform = "STANDARDIZE",
k = 3)
australia.pca
prostate.fit <- h2o.predict(object = prostate.glm, newdata = prostate.hex)
prostate.fit
